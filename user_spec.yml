openapi: '3.0.3'
info:
  title: User Service API Spec
  version: '0.1.1'
servers:
  - url: http://localhost:8080/v1


components:
  schemas:
    userData:
      type: object
      required:
        - email
        - fullName
      properties:
        _id:
          type: string
        email:
          type: string
        profileName:
          type: string
        profilePic:
          type: string
        fullName:
          type: string
        gender:
          type: string
          enum:
            - male
            - female
            - preferNotToSay
            - others
        dob:
          type: string
          format: date
        relationshipStatus:
          type: string
          enum:
            - single
            - inRelationship
            - married
            - complicated
        currentCity:
          type: string
        homeTown:
          type: string
        interests:
          type: array
          items:
            type: string
        hobbies:
          # type: array
          items:
            type: string
        status:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        workPlace:
          type: string
        profession:
          type: string
        educationInstitutes:
          type: array

    createUser:
      type: object
      required:
        - email
        - fullName
      properties:
        email:
          type: string
        profileName:
          type: string
        profilePic:
          type: string
        fullName:
          type: string
        gender:
          type: string
          enum:
            - male
            - female
            - preferNotToSay
            - others
        dob:
          type: string
          format: date
        relationshipStatus:
          type: string
          enum:
            - single
            - inRelationship
            - married
            - complicated
        currentCity:
          type: string
        homeTown:
          type: string
        interests:
          type: array
          items:
            type: string
        hobbies:
          type: array
          items:
            type: string
        status:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        workPlace:
          type: string
        profession:
          type: string
        educationInstitutes:
          type: array

    getUsers:
      type: array
      items:
        $ref: "#/components/schemas/userData"

    userStatusQuery:
      type: object
      properties:
        _id:
          type: array
          items:
            type: string

    userStatus:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
          status:
            type: boolean
          deactivateAt:
            type: string
            format: date-time

    userUpdate:
      type: object
      properties:
        profileName:
          type: string
        profilePic:
          type: string
        fullName:
          type: string
        gender:
          type: string
          enum:
            - male
            - female
            - preferNotSay
            - others
        dob:
          type: string
          format: date
        relationshipStatus:
          type: string
          enum:
            - single
            - inRelationship
            - married
            - complicated
        State:
          type: string
        currentCity:
          type: string
        birthCity:
          type: string
        interests:
          type: array
          items:
            type: string
        hobbies:
          type: array
          items:
            type: string
        workPlace:
          type: string
        profession:
          type: string
        educationInstitute:
          type: string
    QueryRequest:
      type: object
      properties:
        pageNum:
          type: integer
        size:
          type: integer
        filter:
          type: object
          properties:
              relationshipStatus:
                type: string
                enum:
                  - single
                  - inRelationship
                  - married
                  - complicated
              currentCity:
                type: string
              birthCity:
                type: string
              interests:
                type: array
                items:
                  type: string
              hobbies:
                type: array
                items:
                  type: string
              workPlace:
                type: string
              profession:
                type: string
              educationInstitute:
                type: string
              status:
                type: boolean

    QueryResponse:
      type: object
      properties:
        totalCount:
          type: integer
        size:
          type: integer
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              email:
                type: string
              profileName:
                type: string
              profilePic:
                type: string
              fullName:
                type: string
              gender:
                type: string
                enum:
                  - male
                  - female
                  - preferNotSay
                  - others
              dob:
                type: string
                format: date
              relationshipStatus:
                type: string
                enum:
                  - single
                  - inRelationship
                  - married
                  - complicated
              State:
                type: string
              currentCity:
                type: string
              birthCity:
                type: string
              interests:
                type: array
              hobbies:
                type: array
              status:
                type: boolean
                enum:
                  - active
                  - deactivate
              workPlace:
                type: string
              profession:
                type: string
              educationInstitute:
                type: string

    userStatusResponse:
      type: object
      properties:
        _id:
          type: string
        status:
          type: boolean

paths:
  /users:
    get:
      summary: Get user data by providing user ids
      tags:
        - User
      parameters:
        - name: _id
          in: query
          description: string of comma separated ids (one or more)
          required: true
          schema:
            type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userData'
              # example:
              #   success: true
              #   data:
        '422':
          description: Unprocessable Content
          content:
            application/json:
              examples:
                Data type mismatch:
                  value:
                    message: Data type mismatch.
        '405':
          description: Method Not Allowed
          content:
            application/json:
              examples:
                Method not allowed:
                  value:
                    message: Method not allowed
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                not found:
                  value:
                    message: Not found
    post:
      summary: Create a new user account
      tags:
        - User
      requestBody:
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/createUser'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userData'

        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    message: Email _id and First Name are required fields
        '422':
          description: Unprocessable Content
          content:
            application/json:
              examples:
                Data type mismatch:
                  value:
                    message: Expected JSON data
        '405':
          description: Method Not Allowed
          content:
            application/json:
              examples:
                Method not allowed:
                  value:
                    message: Method not allowed
  /users/{_id}:
    put:
      summary: Update user data by providing user _id
      tags:
        - User
      parameters:
      - name: _id
        description: Registered user _id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userData'

        '404':
          description: not found
          content:
            application/json:
              examples:
                not found:
                  value:
                    message: User with the given _id does not exist
        '422':
          description: Unprocessable Content
          content:
            application/json:
              examples:
                Data type mismatch:
                  value:
                    message: Data type mismatch.
        '405':
          description: Method Not Allowed
          content:
            application/json:
              examples:
                Method not allowed:
                  value:
                    message: Method not allowed

    delete:
      summary: Permanently delete the user account by providing user _id
      tags:
        - User
      parameters:
      - name: _id
        description: Registered user _id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userData'

        '404':
          description: not found
          content:
            application/json:
              examples:
                not found:
                  value:
                    message: User with the given _id does not exist
        '422':
          description: Unprocessable Content
          content:
            application/json:
              examples:
                Data type mismatch:
                  value:
                    message: Data type mismatch.
        '405':
          description: Method Not Allowed
          content:
            application/json:
              examples:
                Method not allowed:
                  value:
                    message: Method not allowed
  /users/status:
    get:
      summary: Get user account status querying with a list of comma separated ids
      tags:
        - Status
      parameters:
        - name: _id
          in: query
          description: List of comma separated ids
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userStatusResponse'
        '404':
          description: not found
          content:
            application/json:
              examples:
                not found:
                  value:
                    message: User with the given _id does not exist
        '422':
          description: Unprocessable Content
          content:
            application/json:
              examples:
                Data type mismatch:
                  value:
                    message: Data type mismatch.
        '405':
          description: Method Not Allowed
          content:
            application/json:
              examples:
                Method not allowed:
                  value:
                    message: Method not allowed
  /users/status/{_id}:
    patch:
      summary: Activate/Deactivate user account by providing user _id
      tags:
        - Status
      parameters:
      - name: _id
        description: Registered user _id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: OK
        '404':
          description: not found
          content:
            application/json:
              examples:
                not found:
                  value:
                    message: User with the given _id does not exist
        '422':
          description: Unprocessable Content
          content:
            application/json:
              examples:
                Data type mismatch:
                  value:
                    message: Data type mismatch.
        '405':
          description: Method Not Allowed
          content:
            application/json:
              examples:
                Method not allowed:
                  value:
                    message: Method not allowed
  /users/filter:
    post:
      summary: Query users with filters
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    message: Bad Request
        '405':
          description: Method Not Allowed
          content:
            application/json:
              examples:
                Method not allowed:
                  value:
                    message: Method not allowed
