openapi: '3.0.3'
info:
  title: User Service API Spec
  version: '0.1.1'
servers:
  - url: http://localhost:8080/v1


components:
  schemas:
    userData:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        email:
          type: string
        profileName:
          type: string
        profilePic:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
            - male
            - female
            - preferNotSay
            - others
        dob:
          type: string
          format: date
        relationshipStatus:
          type: string
          enum:
            - single
            - inRelationship
            - married
            - complicated
        State:
          type: string
        currentCity:
          type: string
        birthCity:
          type: string
        interests:
          type: array
        hobbies:
          type: array
        status:
          type: string
          enum:
            - active
            - deactivate
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        workPlace:
          type: string
        profession:
          type: string
        educationInstitute:
          type: string
    
    userStatusQuery:
      type: object
      properties:
        id:
          type: array
          items:
            type: string
           
    userStatus:
      type: array
      items:
        type: object
        properties:
          id: 
            type: string
          status:
            type: string
          deactivateAt:
            type: string
            format: date-time
          

    
    userUpdate:
      type: object
      properties:
        profileName:
          type: string
        profilePic:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
            - male
            - female
            - preferNotSay
            - others
        dob:
          type: string
          format: date
        relationshipStatus:
          type: string
          enum:
            - single
            - inRelationship
            - married
            - complicated
        State:
          type: string
        currentCity:
          type: string
        birthCity:
          type: string
        interests:
          type: array
          items:
            type: string
        hobbies:
          type: array
          items:
            type: string
        workPlace:
          type: string
        profession:
          type: string
        educationInstitute:
          type: string
    QueryRequest:
      type: object
      properties:
        pageNum:
          type: integer
        all:
          type: boolean
        size:
          type: integer
        filter:
          type: object
          properties:
              relationshipStatus:
                type: string
                enum:
                  - single
                  - inRelationship
                  - married
                  - complicated
              State:
                type: string
              currentCity:
                type: string
              birthCity:
                type: string
              interests:
                type: array
                items:
                  type: string
              hobbies:
                type: array
                items:
                  type: string
              workPlace:
                type: string
              profession:
                type: string
              educationInstitute:
                type: string



paths:
  /user/{id}:
    get:
      summary: Get user data by providing user id
      parameters:
      - name: id
        description: Registered user id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userData'
              # example:
              #   success: true
              #   data:
    put:
      summary: Update user data by providing user id
      parameters:
      - name: id
        description: Registered user id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: OK
    delete:
      summary: Permanently delete the user account by providing user id
      parameters:
      - name: id
        description: Registered user id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: OK
    
  /user/status/{id}:
    patch:
      summary: Activate/Deactivate user account by providing user id
      parameters:
      - name: id
        description: Registered user id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: OK
           
  /user:
    post:
      summary: Create a new user account
      requestBody:
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/userData'
      responses:
        '200':
          description: OK

  /users:
    post:
      summary: Query users with filters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Successful response

  /users/status:
    get:
      summary: Get user(s) account status
      requestBody:
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/userStatusQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userStatus'
    